/* === SIMPLE TYPES === */

option java_package = "com.lyndir.omicron";
option cc_generic_services = false;
option java_generic_services = false;
option py_generic_services = false;

message Color {
    required int32 red = 1;
    required int32 green = 2;
    required int32 blue = 3;
}

message Vec2 {
    required int32 x = 1;
    required int32 y = 2;
}

message Size {
    required int32 width = 1;
    required int32 height = 2;
}

/* === MAP TYPES === */

message ModuleByTypeMap {
    required ModuleType key = 1;
    //required Module value = 2;
}

message TileByVec2Map {
    required Vec2 key = 1;
    required Tile value = 2;
}

message CostByLevelTypeMap {
    required LevelType key = 1;
    required double value = 2;
}

message ObjectByIdMap {
    required int32 key = 1;
    //required GameObject value = 2;
}

message QuantityByResourceTypeMap {
    required ResourceType key = 1;
    required int32 value = 2;
}

/* === MODULES === */

enum ModuleType {
    M_BASE = 1;
    M_MOBILITY = 2;
    M_CONTAINER = 3;
    M_EXTRACTOR = 4;
    M_CONSTRUCTOR = 5;
    M_WEAPON = 6;
}

enum ResourceType {
    R_FUEL = 0;
    R_METALS = 1;
    R_SILICON = 2;
    R_RARE_ELEMENTS = 3;
}

enum LevelType {
    L_GROUND = 1;
    L_SKY = 2;
    L_SPACE = 3;
}

message ResourceCost {
    repeated QuantityByResourceTypeMap resourceQuantities = 1;
}

message Module {
    extensions 100 to 199;

    required ResourceCost resourceCost = 1;
    required GameObject gameObject = 2;
    required ModuleType type = 3;
}

message BaseModule {
    extend Module {
        optional BaseModule x_base = 101;
    }

    required int32 maxHealth = 1;
    required int32 armor = 2;
    required int32 viewRange = 3;
    repeated LevelType supportedLayers = 4;
    required int32 damage = 5;
}

message MobilityModule {
    extend Module {
        optional MobilityModule x_mobility = 102;
    }

    required int32 movementSpeed = 1;
    repeated CostByLevelTypeMap movementCost = 2;
    repeated CostByLevelTypeMap levelingCost = 3;

    required double remainingSpeed = 4;
}

message ContainerModule {
    extend Module {
        optional ContainerModule x_container = 103;
    }

    required ResourceType resourceType = 1;
    required int32 capacity = 2;
    required int32 stock = 3;
}

message ExtractorModule {
    extend Module {
        optional ExtractorModule x_extractor = 104;
    }

    required ResourceType resourceType = 1;
    required int32 speed = 2;
}

message ConstructorModule {
    extend Module {
        optional ConstructorModule x_constructor = 105;
    }

    required int32 buildSpeed = 1;
    required ModuleType buildsModule = 2;

    required bool resourceConstrained = 3;
    required int32 remainingSpeed = 4;

    optional GameObject target = 5;
}

message WeaponModule {
    extend Module {
        optional WeaponModule x_weapon = 106;
    }

    required int32 firePower = 1;
    required int32 variance = 2;
    required int32 range = 3;
    required int32 repeat = 4;
    required int32 ammunitionLoad = 5;
    repeated LevelType supportedLayers = 6;
    required int32 repeated = 7;
    required int32 ammunition = 8;
}

/* === GAME === */

enum UnitType {
    U_ENGINEER = 1;
    U_SCOUT = 2;
    U_AIRSHIP = 3;
    U_CONTAINER = 4;
    U_QUARRY = 5;
    U_DRILL = 6;
    U_CONSTRUCTION = 7;
}

enum VictoryConditionType {
    VC_SUPREMACY = 1;
    VC_MIGRATION = 2;
    VC_MIGHT = 3;
    VC_CAPTURE = 4;
}

message Game {
    required Turn currentTurn = 1;
    required Size levelSize = 2;
    repeated Level levels = 3;
    repeated Player players = 4;
    repeated Player readyPlayers = 5;
    required bool running = 6;
}

message GameObject {
    required UnitType unitType = 1;
    required Game game = 2;
    required int32 objectID = 3;
    repeated ModuleByTypeMap modules = 4;
    optional Player owner = 5;
    required Tile location = 6;
}

message Player {
    required int32 playerID = 1;
    required string name = 2;
    required Color primaryColor = 3;
    required Color secondaryColor = 4;
    repeated ObjectByIdMap objects = 5;

    required int32 score = 6;
}

message Turn {
    optional Turn previousTurn = 1;
    required int32 number = 2;
}

message Level {
    required Size size = 1;
    required LevelType type = 2;
    required Game game = 3;
    repeated TileByVec2Map tileMap = 4;
}

message Tile {
    optional GameObject contents = 1;
    required Vec2 position = 2;
    required Level level = 3;
    repeated QuantityByResourceTypeMap resourceQuantities = 4;
}
